/*
 * Music search
 * This service helps in finding music
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommentAcceptRequest;
import org.openapitools.client.model.CommentAcceptResponse;
import org.openapitools.client.model.CommentAddRequest;
import org.openapitools.client.model.CommentAddResponse;
import org.openapitools.client.model.CommentDeclineRequest;
import org.openapitools.client.model.CommentDeclineResponse;
import org.openapitools.client.model.CompositionCreateRequest;
import org.openapitools.client.model.CompositionCreateResponse;
import org.openapitools.client.model.CompositionReadRequest;
import org.openapitools.client.model.CompositionReadResponse;
import org.openapitools.client.model.CompositionSearchRequest;
import org.openapitools.client.model.CompositionSearchResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompositionApi
 */
@Ignore
public class CompositionApiTest {

    private final CompositionApi api = new CompositionApi();

    
    /**
     * Accepts comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commentAcceptTest() throws ApiException {
        CommentAcceptRequest commentAcceptRequest = null;
        CommentAcceptResponse response = api.commentAccept(commentAcceptRequest);

        // TODO: test validations
    }
    
    /**
     * Adds comment to composition discussion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commentAddTest() throws ApiException {
        CommentAddRequest commentAddRequest = null;
        CommentAddResponse response = api.commentAdd(commentAddRequest);

        // TODO: test validations
    }
    
    /**
     * Declines comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commentDeclineTest() throws ApiException {
        CommentDeclineRequest commentDeclineRequest = null;
        CommentDeclineResponse response = api.commentDecline(commentDeclineRequest);

        // TODO: test validations
    }
    
    /**
     * Creates a music composition and creates a new discussion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositionCreateTest() throws ApiException {
        CompositionCreateRequest compositionCreateRequest = null;
        CompositionCreateResponse response = api.compositionCreate(compositionCreateRequest);

        // TODO: test validations
    }
    
    /**
     * Reads the music composition discussion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositionDiscussionReadTest() throws ApiException {
        CompositionReadRequest compositionReadRequest = null;
        CompositionReadResponse response = api.compositionDiscussionRead(compositionReadRequest);

        // TODO: test validations
    }
    
    /**
     * Searches a music composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void musicViewTest() throws ApiException {
        CompositionSearchRequest compositionSearchRequest = null;
        CompositionSearchResponse response = api.musicView(compositionSearchRequest);

        // TODO: test validations
    }
    
}
