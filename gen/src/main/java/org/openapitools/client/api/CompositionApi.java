/*
 * Music search
 * This service helps in finding music
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommentAcceptRequest;
import org.openapitools.client.model.CommentAcceptResponse;
import org.openapitools.client.model.CommentAddRequest;
import org.openapitools.client.model.CommentAddResponse;
import org.openapitools.client.model.CommentDeclineRequest;
import org.openapitools.client.model.CommentDeclineResponse;
import org.openapitools.client.model.CompositionCreateRequest;
import org.openapitools.client.model.CompositionCreateResponse;
import org.openapitools.client.model.CompositionReadRequest;
import org.openapitools.client.model.CompositionReadResponse;
import org.openapitools.client.model.CompositionSearchRequest;
import org.openapitools.client.model.CompositionSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompositionApi {
    private ApiClient localVarApiClient;

    public CompositionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompositionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for commentAccept
     * @param commentAcceptRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentAcceptCall(CommentAcceptRequest commentAcceptRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commentAcceptRequest;

        // create path and map variables
        String localVarPath = "/composition/comment/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentAcceptValidateBeforeCall(CommentAcceptRequest commentAcceptRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentAcceptRequest' is set
        if (commentAcceptRequest == null) {
            throw new ApiException("Missing the required parameter 'commentAcceptRequest' when calling commentAccept(Async)");
        }
        

        okhttp3.Call localVarCall = commentAcceptCall(commentAcceptRequest, _callback);
        return localVarCall;

    }

    /**
     * Accepts comment
     * 
     * @param commentAcceptRequest Request body (required)
     * @return CommentAcceptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CommentAcceptResponse commentAccept(CommentAcceptRequest commentAcceptRequest) throws ApiException {
        ApiResponse<CommentAcceptResponse> localVarResp = commentAcceptWithHttpInfo(commentAcceptRequest);
        return localVarResp.getData();
    }

    /**
     * Accepts comment
     * 
     * @param commentAcceptRequest Request body (required)
     * @return ApiResponse&lt;CommentAcceptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentAcceptResponse> commentAcceptWithHttpInfo(CommentAcceptRequest commentAcceptRequest) throws ApiException {
        okhttp3.Call localVarCall = commentAcceptValidateBeforeCall(commentAcceptRequest, null);
        Type localVarReturnType = new TypeToken<CommentAcceptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accepts comment (asynchronously)
     * 
     * @param commentAcceptRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentAcceptAsync(CommentAcceptRequest commentAcceptRequest, final ApiCallback<CommentAcceptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentAcceptValidateBeforeCall(commentAcceptRequest, _callback);
        Type localVarReturnType = new TypeToken<CommentAcceptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentAdd
     * @param commentAddRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentAddCall(CommentAddRequest commentAddRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commentAddRequest;

        // create path and map variables
        String localVarPath = "/composition/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentAddValidateBeforeCall(CommentAddRequest commentAddRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentAddRequest' is set
        if (commentAddRequest == null) {
            throw new ApiException("Missing the required parameter 'commentAddRequest' when calling commentAdd(Async)");
        }
        

        okhttp3.Call localVarCall = commentAddCall(commentAddRequest, _callback);
        return localVarCall;

    }

    /**
     * Adds comment to composition discussion
     * 
     * @param commentAddRequest Request body (required)
     * @return CommentAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CommentAddResponse commentAdd(CommentAddRequest commentAddRequest) throws ApiException {
        ApiResponse<CommentAddResponse> localVarResp = commentAddWithHttpInfo(commentAddRequest);
        return localVarResp.getData();
    }

    /**
     * Adds comment to composition discussion
     * 
     * @param commentAddRequest Request body (required)
     * @return ApiResponse&lt;CommentAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentAddResponse> commentAddWithHttpInfo(CommentAddRequest commentAddRequest) throws ApiException {
        okhttp3.Call localVarCall = commentAddValidateBeforeCall(commentAddRequest, null);
        Type localVarReturnType = new TypeToken<CommentAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds comment to composition discussion (asynchronously)
     * 
     * @param commentAddRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentAddAsync(CommentAddRequest commentAddRequest, final ApiCallback<CommentAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentAddValidateBeforeCall(commentAddRequest, _callback);
        Type localVarReturnType = new TypeToken<CommentAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentDecline
     * @param commentDeclineRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentDeclineCall(CommentDeclineRequest commentDeclineRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commentDeclineRequest;

        // create path and map variables
        String localVarPath = "/composition/comment/decline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentDeclineValidateBeforeCall(CommentDeclineRequest commentDeclineRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentDeclineRequest' is set
        if (commentDeclineRequest == null) {
            throw new ApiException("Missing the required parameter 'commentDeclineRequest' when calling commentDecline(Async)");
        }
        

        okhttp3.Call localVarCall = commentDeclineCall(commentDeclineRequest, _callback);
        return localVarCall;

    }

    /**
     * Declines comment
     * 
     * @param commentDeclineRequest Request body (required)
     * @return CommentDeclineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CommentDeclineResponse commentDecline(CommentDeclineRequest commentDeclineRequest) throws ApiException {
        ApiResponse<CommentDeclineResponse> localVarResp = commentDeclineWithHttpInfo(commentDeclineRequest);
        return localVarResp.getData();
    }

    /**
     * Declines comment
     * 
     * @param commentDeclineRequest Request body (required)
     * @return ApiResponse&lt;CommentDeclineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentDeclineResponse> commentDeclineWithHttpInfo(CommentDeclineRequest commentDeclineRequest) throws ApiException {
        okhttp3.Call localVarCall = commentDeclineValidateBeforeCall(commentDeclineRequest, null);
        Type localVarReturnType = new TypeToken<CommentDeclineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Declines comment (asynchronously)
     * 
     * @param commentDeclineRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentDeclineAsync(CommentDeclineRequest commentDeclineRequest, final ApiCallback<CommentDeclineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentDeclineValidateBeforeCall(commentDeclineRequest, _callback);
        Type localVarReturnType = new TypeToken<CommentDeclineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositionCreate
     * @param compositionCreateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositionCreateCall(CompositionCreateRequest compositionCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = compositionCreateRequest;

        // create path and map variables
        String localVarPath = "/composition/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositionCreateValidateBeforeCall(CompositionCreateRequest compositionCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compositionCreateRequest' is set
        if (compositionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'compositionCreateRequest' when calling compositionCreate(Async)");
        }
        

        okhttp3.Call localVarCall = compositionCreateCall(compositionCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a music composition and creates a new discussion
     * 
     * @param compositionCreateRequest Request body (required)
     * @return CompositionCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CompositionCreateResponse compositionCreate(CompositionCreateRequest compositionCreateRequest) throws ApiException {
        ApiResponse<CompositionCreateResponse> localVarResp = compositionCreateWithHttpInfo(compositionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a music composition and creates a new discussion
     * 
     * @param compositionCreateRequest Request body (required)
     * @return ApiResponse&lt;CompositionCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompositionCreateResponse> compositionCreateWithHttpInfo(CompositionCreateRequest compositionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = compositionCreateValidateBeforeCall(compositionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CompositionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a music composition and creates a new discussion (asynchronously)
     * 
     * @param compositionCreateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositionCreateAsync(CompositionCreateRequest compositionCreateRequest, final ApiCallback<CompositionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositionCreateValidateBeforeCall(compositionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CompositionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositionDiscussionRead
     * @param compositionReadRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositionDiscussionReadCall(CompositionReadRequest compositionReadRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = compositionReadRequest;

        // create path and map variables
        String localVarPath = "/composition/discussion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositionDiscussionReadValidateBeforeCall(CompositionReadRequest compositionReadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compositionReadRequest' is set
        if (compositionReadRequest == null) {
            throw new ApiException("Missing the required parameter 'compositionReadRequest' when calling compositionDiscussionRead(Async)");
        }
        

        okhttp3.Call localVarCall = compositionDiscussionReadCall(compositionReadRequest, _callback);
        return localVarCall;

    }

    /**
     * Reads the music composition discussion
     * 
     * @param compositionReadRequest Request body (required)
     * @return CompositionReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CompositionReadResponse compositionDiscussionRead(CompositionReadRequest compositionReadRequest) throws ApiException {
        ApiResponse<CompositionReadResponse> localVarResp = compositionDiscussionReadWithHttpInfo(compositionReadRequest);
        return localVarResp.getData();
    }

    /**
     * Reads the music composition discussion
     * 
     * @param compositionReadRequest Request body (required)
     * @return ApiResponse&lt;CompositionReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompositionReadResponse> compositionDiscussionReadWithHttpInfo(CompositionReadRequest compositionReadRequest) throws ApiException {
        okhttp3.Call localVarCall = compositionDiscussionReadValidateBeforeCall(compositionReadRequest, null);
        Type localVarReturnType = new TypeToken<CompositionReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads the music composition discussion (asynchronously)
     * 
     * @param compositionReadRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositionDiscussionReadAsync(CompositionReadRequest compositionReadRequest, final ApiCallback<CompositionReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositionDiscussionReadValidateBeforeCall(compositionReadRequest, _callback);
        Type localVarReturnType = new TypeToken<CompositionReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicView
     * @param compositionSearchRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicViewCall(CompositionSearchRequest compositionSearchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = compositionSearchRequest;

        // create path and map variables
        String localVarPath = "/composition/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicViewValidateBeforeCall(CompositionSearchRequest compositionSearchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compositionSearchRequest' is set
        if (compositionSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'compositionSearchRequest' when calling musicView(Async)");
        }
        

        okhttp3.Call localVarCall = musicViewCall(compositionSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Searches a music composition
     * 
     * @param compositionSearchRequest Request body (required)
     * @return CompositionSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public CompositionSearchResponse musicView(CompositionSearchRequest compositionSearchRequest) throws ApiException {
        ApiResponse<CompositionSearchResponse> localVarResp = musicViewWithHttpInfo(compositionSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Searches a music composition
     * 
     * @param compositionSearchRequest Request body (required)
     * @return ApiResponse&lt;CompositionSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompositionSearchResponse> musicViewWithHttpInfo(CompositionSearchRequest compositionSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = musicViewValidateBeforeCall(compositionSearchRequest, null);
        Type localVarReturnType = new TypeToken<CompositionSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches a music composition (asynchronously)
     * 
     * @param compositionSearchRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicViewAsync(CompositionSearchRequest compositionSearchRequest, final ApiCallback<CompositionSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicViewValidateBeforeCall(compositionSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<CompositionSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
